#!/bin/bash
# ==========================================================================
# delayed_job - start and stop delayed_job workers
# ==========================================================================
# Source function library.
. /usr/local/etc/init.d/functions

export PATH=/usr/local/bin:$PATH
export PATH=/home/backbeat/.immutant/releases/current/jruby/bin:$PATH

NAME="backbeat delayed job"
ROOT="/var/groupon/backbeat/current"
export USER="backbeat"
LOGFILE=/var/groupon/backbeat/shared/log/$(basename $0).log
BUNDLER="/usr/local/bin/bundle"
PIDFILE="/var/groupon/backbeat/shared/pids/$(basename $0).%d.pid"
PROGRAM="$BUNDLER exec jruby $ROOT/script/delayed_job_backbeat"

HOST=`hostname`
# avert your eyes
RACK_ENV=`ruby -e "puts(case \"$HOST\"; when /uat/, /fed2-tat/; 'uat'; when /staging/, /fed1-tat/; 'staging'; else; 'production'; end)"`

COUNT=1

action() {
  local command=$1
  local user_args
	local pidfile

  if [[ $EUID -ne 0 ]]; then
    user_args=""
  else
    user_args="--user=$USER"
  fi

  for i in $(seq 1 $COUNT); do
		pidfile=$(printf "$PIDFILE" $i)
    echo -n "${command}ing delayed_job $i: "
    daemon $user_args "cd $ROOT; RACK_ENV=$RACK_ENV $PROGRAM $command $pidfile > $LOGFILE 2>&1 &"
    echo
  done
}

status_int() {
	local pidfile
	for i in $(seq 1 $COUNT); do
		pidfile=$(printf "$PIDFILE" $i)

    echo -n "checking $i..."
		status -p $pidfile
	done
}

case "$1" in
  start)
        action "start"
        ;;
  stop)
        action "stop"
        ;;
  status)
        status_int
        ;;
  restart)
        action "restart"
        ;;
  *)
        echo $"Usage: $0 {start|stop|status|restart}"
        exit 2
esac

exit $?
